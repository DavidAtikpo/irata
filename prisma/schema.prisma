generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["webirata"]
}

model User {
  id                            String                         @id @default(cuid())
  email                         String                         @unique
  password                      String
  nom                           String?
  prenom                        String?
  role                          Role                           @default(USER)
  niveau                        String?                        @default("1") // Niveau IRATA (1, 2, 3)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  passwordResetToken            String?                        @unique
  passwordResetExpires          DateTime?
  contrats                      Contrat[]
  contributions                 Contribution[]
  customerSatisfactionResponses CustomerSatisfactionResponse[]
  demandes                      Demande[]
  devis                         Devis[]
  documents                     Document[]
  assessorInspections           EquipmentInspection[]          @relation("AssessorInspections")
  inspections                   EquipmentInspection[]
  formulairesCrees              FormulairesQuotidiens[]        @relation("AdminFormulaires")
  IrataDisclaimerSubmission     IrataDisclaimerSubmission[]
  invoices                      Invoice[]
  jobPlans                      JobPlan[]
  preJobTrainingSignatures      PreJobTrainingSignature[]
  reponsesFormulaires           ReponseFormulaire[]            @relation("StagiaireReponses")
  traineeProgress               TraineeProgress[]
  traineeSignatures             TraineeSignature?
  trainingSessions              TrainingSession[]              @relation("TrainingSessionTrainees")
  traineeInductionSignatures    TraineeInductionSignature[]
  notifications                 Notification[]
  documentActions               DocumentAction[]
  nonConformitesDetectees       NonConformite[]             @relation("NonConformiteDetecteur")
  nonConformitesResponsable     NonConformite[]             @relation("NonConformiteResponsable")
  actionsCorrectivesResponsable ActionCorrective[]          @relation("ActionCorrectiveResponsable")
  nonConformiteCommentaires     NonConformiteCommentaire[]  @relation("NonConformiteCommentaireUser")
  actionCorrectiveCommentaires  ActionCorrectiveCommentaire[] @relation("ActionCorrectiveCommentaireUser")
  attendanceSignatures          AttendanceSignature[]      @relation("AttendanceSignatures")

  @@schema("webirata")
}

model Formation {
  id          String   @id @default(cuid())
  titre       String
  description String
  duree       String
  prix        Float
  niveau      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("webirata")
}

model Demande {
  id          String   @id @default(cuid())
  userId      String
  statut      Statut   @default(EN_ATTENTE)
  session     String
  message     String?
  commentaire String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  devis       Devis?

  @@schema("webirata")
}

model Devis {
  id               String     @id @default(cuid())
  demandeId        String     @unique
  userId           String
  numero           String
  client           String
  mail             String
  mail2            String     @default("atikpododzi4@gmail.com")
  adresseLivraison String?
  dateLivraison    DateTime?
  dateExamen       DateTime?
  adresse          String?
  siret            String?
  numNDA           String?
  dateFormation    DateTime?
  suiviPar         String?
  designation      String
  quantite         Int
  unite            String
  prixUnitaire     Float
  tva              Float
  exoneration      String?
  datePriseEffet   DateTime?
  montant          Float
  iban             String?
  bic              String?
  banque           String?
  intituleCompte   String?
  signature        String?
  statut           Statut     @default(EN_ATTENTE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  contrat          Contrat?
  demande          Demande    @relation(fields: [demandeId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
  documents        Document[]

  @@schema("webirata")
}

model Contrat {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  devisId       String   @unique
  userId        String
  nom           String
  prenom        String
  adresse       String
  profession    String?
  dateSignature DateTime
  signature     String
  statut        String   @default("EN_ATTENTE")
  devis         Devis    @relation(fields: [devisId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  invoices      Invoice[]

  @@index([devisId])
  @@index([userId])
  @@schema("webirata")
}

model Settings {
  id        String   @id @default("1")
  company   Json
  formation Json
  email     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("webirata")
}

model PasswordResetToken {
  email     String   @unique
  token     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@schema("webirata")
}

model Document {
  id              String   @id @default(cuid())
  nom             String
  description     String?
  cloudinaryId    String   @unique
  url             String
  type            String
  public          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  devisId         String?
  certificationId String?
  devis           Devis?   @relation(fields: [devisId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])
  actions         DocumentAction[]
  historiqueItems HistoriqueItem[]

  @@schema("webirata")
}

model DocumentAction {
  id         String           @id @default(cuid())
  documentId String
  userId     String
  action     DocumentActionType
  timestamp  DateTime         @default(now())
  ipAddress  String?
  userAgent  String?
  document   Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId, action])
  @@schema("webirata")
}

enum DocumentActionType {
  RECEIVED    // Document reçu (accusé de réception)
  OPENED      // Document ouvert
  DOWNLOADED  // Document téléchargé

  @@schema("webirata")
}

model FormulairesQuotidiens {
  id           String              @id @default(cuid())
  titre        String
  description  String?
  session      String
  niveau       String              @default("1") // Niveau IRATA ciblé (1, 2, 3)
  dateCreation DateTime            @default(now())
  dateDebut    DateTime
  dateFin      DateTime
  actif        Boolean             @default(true)
  valide       Boolean             @default(false)
  questions    Json
  createdBy    String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  admin        User                @relation("AdminFormulaires", fields: [createdBy], references: [id])
  reponses     ReponseFormulaire[]

  @@schema("webirata")
}

model ReponseFormulaire {
  id               String                @id @default(cuid())
  formulaireId     String
  stagiaireId      String
  dateReponse      DateTime              @default(now())
  reponses         Json
  commentaires     String?
  soumis           Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  commentaireAdmin String?
  decisionAdmin    DecisionAdmin?
  maxScore         Int?
  score            Int?
  scoreAdmin       Int?
  formulaire       FormulairesQuotidiens @relation(fields: [formulaireId], references: [id], onDelete: Cascade)
  stagiaire        User                  @relation("StagiaireReponses", fields: [stagiaireId], references: [id], onDelete: Cascade)

  @@unique([formulaireId, stagiaireId, dateReponse])
  @@schema("webirata")
}

model EquipmentInspection {
  id                           String           @id @default(cuid())
  docNumber                    String           @default("HS019ENG")
  dateOfIssue                  DateTime         @default(now())
  issueNumber                  String           @default("001")
  inspectionDate               DateTime
  technicianName               String
  technicianIrataNo            String
  makeOfItem                   String
  modelOfItem                  String
  itemIdNumber                 String
  standardsConformance         String?
  suitabilityOfItem            String?
  ageOfItem                    String?
  historyOfItem                String?
  metalPartsCondition          String?
  textilePartsCondition        String?
  plasticPartsCondition        String?
  movingPartsFunction          String?
  operationalCheck             String?
  compatibilityCheck           String?
  overallComments              String?
  technicianVerdict            Verdict?
  assessorVerdict              Verdict?
  assessorComments             String?
  candidateCorrectlyIdentified Boolean?
  status                       InspectionStatus @default(DRAFT)
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
  technicianId                 String
  assessorId                   String?
  assessor                     User?            @relation("AssessorInspections", fields: [assessorId], references: [id])
  technician                   User             @relation(fields: [technicianId], references: [id])

  @@schema("webirata")
}

model JobPlan {
  id                   String           @id @default(cuid())
  docNumber            String           @default("HS061ENG")
  dateOfIssue          DateTime         @default(now())
  issueNumber          String           @default("001")
  technicianName       String
  technicianIrataNo    String
  jobDate              DateTime
  jobLength            String?
  clientDetails        String?
  taskDetails          String
  location             String
  height               String?
  accessMethod         String?
  communicationMethods String?
  permitRequirements   String?
  anchorStructure      String
  anchorEquipment      String
  accessPlan           String
  evacuationPlan       String
  rescuePlan           String
  status               InspectionStatus @default(DRAFT)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  technicianId         String
  technician           User             @relation(fields: [technicianId], references: [id])

  @@schema("webirata")
}

model TraineeFollowUp {
  id           String             @id @default(cuid())
  title        String             @default("CI.DES TRAINEE FOLLOW UP FORM")
  codeNumber   String             @default("ENR-CIFRA-FORM 004")
  revision     String             @default("01")
  creationDate DateTime           @default(now())
  status       String             @default("ACTIVE")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  levelData    TraineeLevelData[]
  progress     TraineeProgress[]
  signatures   TraineeSignature[]

  @@schema("webirata")
}

model TraineeProgress {
  id           String           @id @default(cuid())
  syllabusItem String
  traineeId    String
  day          String
  completed    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  followUpId   String?
  followUp     TraineeFollowUp? @relation(fields: [followUpId], references: [id])
  trainee      User             @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  @@unique([syllabusItem, traineeId, day])
  @@schema("webirata")
}

model TraineeLevelData {
  id           String           @id @default(cuid())
  syllabusItem String
  level        String
  required     Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  followUpId   String?
  followUp     TraineeFollowUp? @relation(fields: [followUpId], references: [id])

  @@unique([syllabusItem, level])
  @@schema("webirata")
}

model TraineeSignature {
  id             String           @id @default(cuid())
  traineeId      String           @unique
  signature      String
  adminSignature String?
  isValidated    Boolean          @default(false)
  validatedAt    DateTime?
  currentDay     Int              @default(1)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  followUpId     String?
  sessionId      String?
  followUp       TraineeFollowUp? @relation(fields: [followUpId], references: [id])
  session        TrainingSession? @relation(fields: [sessionId], references: [id])
  trainee        User             @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  @@schema("webirata")
}

model TrainingSession {
  id         String             @id @default(cuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  status     String             @default("ACTIVE")
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  signatures TraineeSignature[]
  trainees   User[]             @relation("TrainingSessionTrainees")

  @@schema("webirata")
}

model Contribution {
  id                    String             @id @default(cuid())
  donorName             String
  donorEmail            String
  donorPhone            String?
  amount                Int
  type                  ContributionType
  returnAmount          Int
  returnDescription     String?
  paymentMethod         PaymentMethod      @default(MOBILE_MONEY)
  status                ContributionStatus @default(PENDING)
  stripePaymentIntentId String?            @unique
  notes                 String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  userId                String?
  user                  User?              @relation(fields: [userId], references: [id])

  @@schema("webirata")
}

model CustomerSatisfactionResponse {
  id          String                   @id @default(cuid())
  userId      String?
  traineeName String?
  type        CustomerSatisfactionType
  date        DateTime                 @default(now())
  items       Json
  suggestions String?
  session     String?
  signature   String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  user        User?                    @relation(fields: [userId], references: [id])

  @@schema("webirata")
}

model IrataDisclaimerSubmission {
  id             String                @id
  name           String?
  address        String
  signature      String
  session        String?
  irataNo        String?
  userId         String?
  adminSignature String?
  adminSignedAt  DateTime?
  adminName      String?
  status         IrataDisclaimerStatus @default(PENDING)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime
  User           User?                 @relation(fields: [userId], references: [id])

  @@schema("webirata")
}

enum Role {
  USER
  ADMIN
  GESTIONNAIRE
  CONTRIBUTOR

  @@schema("webirata")
}

enum Statut {
  EN_ATTENTE
  VALIDE
  REFUSE
  ANNULE

  @@schema("webirata")
}

enum InspectionStatus {
  DRAFT
  SUBMITTED
  ASSESSED
  APPROVED
  REJECTED

  @@schema("webirata")
}

enum Verdict {
  PASS
  FAIL
  DISCREPANCY

  @@schema("webirata")
}

enum DecisionAdmin {
  ACCEPTE
  REFUSE
  A_REVOIR

  @@schema("webirata")
}

enum ContributionType {
  PREFORMATION
  FINANCIAL
  MATERIAL

  @@schema("webirata")
}

enum ContributionStatus {
  PENDING
  CONFIRMED
  PROCESSED
  CANCELLED

  @@schema("webirata")
}

enum PaymentMethod {
  MOBILE_MONEY
  BANK_TRANSFER
  CASH
  CRYPTO
  VIREMENT

  @@schema("webirata")
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED

  @@schema("webirata")
}

enum CustomerSatisfactionType {
  ENVIRONMENT_RECEPTION
  EQUIPMENT
  TRAINING_PEDAGOGY

  @@schema("webirata")
}

enum IrataDisclaimerStatus {
  PENDING
  SIGNED
  SENT

  @@schema("webirata")
}

enum NonConformiteType {
  SECURITE
  QUALITE
  PROCEDURE
  EQUIPEMENT
  FORMATION
  DOCUMENTATION
  ENVIRONNEMENT
  AUTRE

  @@schema("webirata")
}

enum NonConformiteGravite {
  MINEURE
  MAJEURE
  CRITIQUE

  @@schema("webirata")
}

enum NonConformiteStatut {
  OUVERTE
  EN_COURS
  FERMEE
  ANNULEE

  @@schema("webirata")
}

enum ActionCorrectiveType {
  CORRECTION_IMMEDIATE
  ACTION_CORRECTIVE
  ACTION_PREVENTIVE
  AMELIORATION_CONTINUE

  @@schema("webirata")
}

enum ActionCorrectiveStatut {
  EN_COURS
  TERMINEE
  EN_ATTENTE
  ANNULEE

  @@schema("webirata")
}

enum ActionCorrectivePriorite {
  BASSE
  MOYENNE
  HAUTE
  CRITIQUE

  @@schema("webirata")
}

enum ActionCorrectiveEfficacite {
  TRES_EFFICACE
  EFFICACE
  PARTIELLEMENT_EFFICACE
  INEFFICACE

  @@schema("webirata")
}

model PreJobTrainingSignature {
  id            String   @id @default(cuid())
  day           String   // Jour de la semaine (Lundi, Mardi, etc.)
  signatureData String   // Signature en base64
  userId        String
  userName      String?
  signedAt      DateTime @default(now())
  autoSigned    Boolean  @default(true) // Indique si c'est une signature automatique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("webirata")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paidAmount    Float?        // Montant déjà payé pour les paiements partiels
  paymentMethod PaymentMethod?
  notes         String?       // Notes du paiement
  userId        String
  contratId     String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contrat       Contrat       @relation(fields: [contratId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@schema("webirata")
}

model TraineeInduction {
  id             String   @id @default(cuid())
  sessionId      String   // ID de la session de formation
  courseDate     String   // Date du cours
  courseLocation String   // Lieu du cours
  diffusion      String   // Diffusion
  copie          String   // Copie
  adminSignature String   // Signature de l'administrateur
  status         String   @default("draft") // draft, admin_signed, published_to_trainees
  publishedAt    DateTime? // Date de publication aux stagiaires
  signatures     TraineeInductionSignature[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("webirata")
}

model TraineeInductionSignature {
  id             String          @id @default(cuid())
  inductionId    String
  userId         String
  userSignature  String          // Signature de l'utilisateur
  induction      TraineeInduction @relation(fields: [inductionId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([inductionId, userId])

  @@schema("webirata")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  category  String?
  metadata  String?
  read      Boolean  @default(false)
  relatedId String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("webirata")
}

model NonConformite {
  id                String                    @id @default(cuid())
  numero            String                    @unique // Numéro unique de non-conformité
  titre             String
  description       String
  type              NonConformiteType
  gravite           NonConformiteGravite
  statut            NonConformiteStatut       @default(OUVERTE)
  dateDetection     DateTime                  @default(now())
  dateEcheance      DateTime?
  lieu              String?
  detecteurId       String                    // Qui a détecté la non-conformité
  responsableId     String?                   // Qui est responsable de la correction
  sessionId         String?                   // Session de formation concernée
  formulaireId      String?                   // Formulaire lié si applicable
  inspectionId      String?                   // Inspection liée si applicable
  documents         NonConformiteDocument[]
  actionsCorrectives ActionCorrective[]
  commentaires      NonConformiteCommentaire[]
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  detecteur         User                      @relation("NonConformiteDetecteur", fields: [detecteurId], references: [id])
  responsable       User?                     @relation("NonConformiteResponsable", fields: [responsableId], references: [id])

  @@schema("webirata")
}

model ActionCorrective {
  id                String                    @id @default(cuid())
  nonConformiteId   String?
  titre             String
  description       String
  type              ActionCorrectiveType
  statut            ActionCorrectiveStatut    @default(EN_COURS)
  priorite          ActionCorrectivePriorite  @default(MOYENNE)
  dateDebut         DateTime                  @default(now())
  dateEcheance      DateTime?
  dateRealisation   DateTime?
  responsableId     String
  resultats         String?
  efficacite        ActionCorrectiveEfficacite?
  documents         ActionCorrectiveDocument[]
  commentaires      ActionCorrectiveCommentaire[]
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  nonConformite     NonConformite?            @relation(fields: [nonConformiteId], references: [id], onDelete: Cascade)
  responsable       User                      @relation("ActionCorrectiveResponsable", fields: [responsableId], references: [id])

  @@schema("webirata")
}

model NonConformiteDocument {
  id              String        @id @default(cuid())
  nonConformiteId String
  nom             String
  description     String?
  url             String
  type            String
  createdAt       DateTime      @default(now())
  nonConformite   NonConformite @relation(fields: [nonConformiteId], references: [id], onDelete: Cascade)

  @@schema("webirata")
}

model ActionCorrectiveDocument {
  id                String           @id @default(cuid())
  actionCorrectiveId String
  nom               String
  description       String?
  url               String
  type              String
  createdAt         DateTime         @default(now())
  actionCorrective  ActionCorrective @relation(fields: [actionCorrectiveId], references: [id], onDelete: Cascade)

  @@schema("webirata")
}

model NonConformiteCommentaire {
  id              String        @id @default(cuid())
  nonConformiteId String
  userId          String
  commentaire     String
  createdAt       DateTime      @default(now())
  nonConformite   NonConformite @relation(fields: [nonConformiteId], references: [id], onDelete: Cascade)
  user            User          @relation("NonConformiteCommentaireUser", fields: [userId], references: [id])

  @@schema("webirata")
}

model ActionCorrectiveCommentaire {
  id                String           @id @default(cuid())
  actionCorrectiveId String
  userId            String
  commentaire       String
  createdAt         DateTime         @default(now())
  actionCorrective  ActionCorrective @relation(fields: [actionCorrectiveId], references: [id], onDelete: Cascade)
  user              User             @relation("ActionCorrectiveCommentaireUser", fields: [userId], references: [id])

  @@schema("webirata")
}



model AttendanceSignature {
  id            String   @id @default(cuid())
  userId        String
  signatureKey  String   // format: "Lundi-matin", "Mardi-soir", etc.
  signatureData String   // base64 image data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation("AttendanceSignatures", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, signatureKey])
  @@schema("webirata")
}

model TeamMember {
  id             String   @id @default(cuid())
  name           String
  role           String
  experience     String
  certifications String?  // JSON string des certifications
  photo          String?
  email          String?
  linkedin       String?
  isActive       Boolean  @default(true)
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("webirata")
}

model EdgeAndRopeManagementValidation {
  id             String   @id @default(cuid())
  adminName      String
  adminSignature String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("webirata")
}

model HistoriqueItem {
  id          String   @id @default(cuid())
  annee       String
  session     String
  commentaire String?
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@schema("webirata")
}
