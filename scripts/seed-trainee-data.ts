import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const syllabus = [
  'Planification et gestion',
  'Syst√®me IRATA International',
  'Cadre l√©gal',
  'Identification des dangers et √©valuation des risques',
  'S√©lection de la m√©thode d\'acc√®s',
  'S√©lection du personnel et comp√©tences',
  'D√©claration de m√©thode de s√©curit√©',
  'Zones de s√©lection, permis de travail, etc.',
  'Planification des urgences',
  'Premiers secours et tol√©rance √† la suspension',
  'S√©lection de l\'√©quipement',
  'Inspection et maintenance de l\'√©quipement',
  'Contr√¥le de pression de l\'√©quipement',
  'Inspections d√©taill√©es et interm√©diaires',
  'Assemblage de l\'√©quipement et v√©rification mutuelle',
  'S√©lection d\'ancrages',
  'N≈ìuds et manipulation de corde',
  'Syst√®me d\'ancrage de base',
  'Formes en Y',
  '√âvitement des dangers et protection des cordes',
  'R√©ancrages',
  'D√©viations',
  'Traction sur points d\'insertion',
  'Lignes de travail r√©sistantes',
  'Syst√®me d\'arr√™t de chute verticale',
  'Lignes tendues',
  'Syst√®mes de descente',
  'Syst√®mes de hissage',
  'Hissage crois√©',
  'Syst√®mes de sauvetage complexes (exercice d\'√©quipe)',
  'Dispositifs de secours',
  'Descente',
  'Mont√©e',
  'Changements de mode',
  'Descente avec dispositifs de mont√©e',
  'Mont√©e avec dispositifs de descente',
  'D√©viation simple',
  'D√©viation double',
  'Transferts corde √† corde',
  'R√©ancrages niveau 1 (<1.5 m)',
  'R√©ancrages niveau 2 et 3 (>1.5 m)',
  'Passage des n≈ìuds en milieu de corde',
  'Obstacles de bord en haut',
  'Utilisation des si√®ges de travail (si√®ges confort)',
  'Passage des protections en milieu de corde',
  'Escalade aid√©e mobile horizontale',
  'Escalade aid√©e fixe horizontale',
  'Escalade aid√©e verticale',
  'Escalade avec √©quipement d\'arr√™t de chute',
  'Sauvetage en mode descente',
  'Sauvetage en mode mont√©e',
  'Passage d\'une d√©viation avec victime',
  'Transfert corde √† corde avec victime',
  'Passage d\'un petit r√©ancrage avec victime',
  'Sauvetage en milieu de transfert',
  'Passage de n≈ìuds en milieu de corde avec victime',
  'Utilisation de cordes tendues pour le sauvetage',
  'Sauvetage en escalade aid√©e',
  'Sauvetage avec √©quipement d\'arr√™t de chute',
  'Sauvetage en escalade aid√©e : liaison courte'
];

const days = ['J1', 'J2', 'J3', 'J4', 'J5'];
const levels = ['Level 1', 'Level 2', 'Level 3'];

async function main() {
  console.log('üå± D√©but du seeding des donn√©es Trainee Follow Up...');

  try {
    // R√©cup√©rer tous les utilisateurs avec le r√¥le USER
    const users = await prisma.user.findMany({
      where: { role: 'USER' },
      select: { id: true, nom: true, prenom: true }
    });

    console.log(`üìã ${users.length} utilisateurs trouv√©s`);

    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√©. Cr√©ez d\'abord des utilisateurs avec le r√¥le USER.');
      return;
    }

    // Cr√©er des donn√©es de niveau pour tous les √©l√©ments du programme
    console.log('üìä Cr√©ation des donn√©es de niveau...');
    for (const item of syllabus) {
      for (const level of levels) {
        await prisma.traineeLevelData.upsert({
          where: {
            syllabusItem_level: {
              syllabusItem: item,
              level: level
            }
          },
          update: {},
          create: {
            syllabusItem: item,
            level: level,
            required: Math.random() > 0.3 // 70% des niveaux sont requis
          }
        });
      }
    }

    // Cr√©er des donn√©es de progression pour chaque utilisateur
    console.log('üìà Cr√©ation des donn√©es de progression...');
    for (const user of users) {
      for (const item of syllabus) {
        for (const day of days) {
          await prisma.traineeProgress.upsert({
            where: {
              syllabusItem_traineeId_day: {
                syllabusItem: item,
                traineeId: user.id,
                day: day
              }
            },
            update: {},
            create: {
              syllabusItem: item,
              traineeId: user.id,
              day: day,
              completed: Math.random() > 0.6 // 40% des cases sont coch√©es
            }
          });
        }
      }
    }

    // Cr√©er des signatures pour chaque utilisateur
    console.log('‚úçÔ∏è Cr√©ation des signatures...');
    for (const user of users) {
      await prisma.traineeSignature.upsert({
        where: { traineeId: user.id },
        update: {},
        create: {
          traineeId: user.id,
          signature: `${user.prenom} ${user.nom}`,
          adminSignature: ''
        }
      });
    }

    console.log('‚úÖ Seeding termin√© avec succ√®s !');
    console.log(`üìä Donn√©es cr√©√©es :`);
    console.log(`   - ${syllabus.length} √©l√©ments du programme`);
    console.log(`   - ${users.length} utilisateurs`);
    console.log(`   - ${syllabus.length * users.length * days.length} entr√©es de progression`);
    console.log(`   - ${users.length} signatures`);

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 